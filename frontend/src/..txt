import { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ArrowUp, ArrowDown, Trash2 } from "lucide-react";
import AddFieldSelector from "../components/AddFieldSelector";
import { v4 as uuidv4 } from "uuid"; 
import {DragDropContext,Droppable,Draggable,} from "@hello-pangea/dnd";


// Lista de preestablecidos (puede crecer dinámicamente)
const PREDEFINED_FIELDS = [
  { type: "Texto", label: "Conductor" },
    { type: "Kilometraje", label: "Kilometraje" },
    { type: "Texto", label: "Placa" },
    { type: "Texto", label: "Responsable de la Inspeccion" },
    { type: "FechasP", label: "Fechas" },
    { type: "Hora", label: "Hora de Ingreso" },
    { type: "Texto", label: "Empresa" },
    
];

export default function ChecklistTemplateBuilder() {
  const [groups, setGroups] = useState([]);
  const [moveMode, setMoveMode] = useState(false);


  // ➕ Crear nuevo grupo vacío
  const addGroup = () => {
    const id = uuidv4();
    setGroups((prev) => [
      ...prev,
      { id, name: `Grupo ${prev.length + 1}`, fields: [] },
    ]);
  };

// ➕ Crear grupo con campos preestablecidos
  const addPredefinedGroup = () => {
    const id = uuidv4();
    const fieldsWithIds = PREDEFINED_FIELDS.map((f) => ({
      id: uuidv4(),
      type: f.type,
      label: f.label,
      value: null,
      ...(f.type === "FechasP" ? { startDate: "", endDate: "" } : {}),
    }));

    setGroups((prev) => [
      ...prev,
      {
        id,
        name: `Grupo Preestablecido ${prev.length + 1}`,
        fields: fieldsWithIds,
      },
    ]);
  };

  // ➖ Eliminar grupo
  const removeGroup = (groupIndex) => {
    const updatedGroups = [...groups];
    updatedGroups.splice(groupIndex, 1);
    setGroups(updatedGroups);
  };

  // ➕ Agregar campo a un grupo
  const addField = (groupIndex, type) => {
  const newField = {
    id: uuidv4(),
    type,
    label: `Nuevo ${type}`,
    value: null,
    ...(type === "FechasP" ? { startDate: "", endDate: "" } : {}), 
  };
    const updatedGroups = [...groups];
    updatedGroups[groupIndex].fields.push(newField);
    setGroups(updatedGroups);
  };

  // ✏️ Actualizar campo
  const updateField = (groupIndex, fieldIndex, updatedField) => {
    const newGroups = [...groups];
    newGroups[groupIndex].fields[fieldIndex] = updatedField;
    setGroups(newGroups);
  };
  // ✏️ Actualizar campo DE GRUPOS 
  const updateGroupName = (groupIndex, newName) => {
  setGroups((prevGroups) =>
    prevGroups.map((g, i) =>
      i === groupIndex ? { ...g, name: newName } : g
    )
  );
};

  // ➖ Eliminar campo
  const removeField = (groupIndex, fieldIndex) => {
    const updatedGroups = [...groups];
    updatedGroups[groupIndex].fields.splice(fieldIndex, 1);
    setGroups(updatedGroups);
  };

  // 💾 Guardar plantilla
  const saveTemplate = () => {
    localStorage.setItem("checklistTemplate", JSON.stringify(groups));
    alert("✅ Plantilla guardada en localStorage");
  };

  // 🔄 Mover grupo hacia arriba o abajo
    const moveGroup = (index, direction) => {
      const newGroups = [...groups];

      if (direction === "up" && index > 0) {
        // intercambia con el anterior
        [newGroups[index - 1], newGroups[index]] = [newGroups[index], newGroups[index - 1]];
      }

      if (direction === "down" && index < newGroups.length - 1) {
        // intercambia con el siguiente
        [newGroups[index + 1], newGroups[index]] = [newGroups[index], newGroups[index + 1]];
      }

      setGroups(newGroups);
    };

    const handleDragEnd = (result) => {
  const { source, destination } = result;

  // Si no hay destino, no hacemos nada
  if (!destination) return;

  // Si se arrastra al mismo lugar, no hacemos nada
  if (
    source.droppableId === destination.droppableId &&
    source.index === destination.index
  ) {
    return;
  }

  setGroups((prevGroups) => {
    const newGroups = [...prevGroups];

    // Copiamos los arrays para no mutar
    const sourceGroupIndex = newGroups.findIndex((g) => g.id === source.droppableId);
    const destGroupIndex = newGroups.findIndex((g) => g.id === destination.droppableId);

    const sourceFields = Array.from(newGroups[sourceGroupIndex].fields);
    const [movedItem] = sourceFields.splice(source.index, 1);

    if (sourceGroupIndex === destGroupIndex) {
      // 👉 mismo grupo: reordenar
      sourceFields.splice(destination.index, 0, movedItem);
      newGroups[sourceGroupIndex].fields = sourceFields;
    } else {
      // 👉 distinto grupo: mover de uno a otro
      const destFields = Array.from(newGroups[destGroupIndex].fields);
      destFields.splice(destination.index, 0, movedItem);

      newGroups[sourceGroupIndex].fields = sourceFields;
      newGroups[destGroupIndex].fields = destFields;
    }

    return newGroups;
  });
};

  
  return (
    
    <div className="p-6 space-y-6">
      <h1 className="text-2xl font-bold">Constructor de Checklist</h1>

      {/* Botones principales */}
      <div className="flex gap-2 items-center mb-2">
        {/* Botón normal de agregar manual */}
        <Button onClick={addGroup}>➕ Nuevo Grupo</Button>
        <Button onClick={addPredefinedGroup}>📂 Agregar Preestablecidos</Button>
        <Button onClick={saveTemplate}>💾 Guardar </Button>
        <Button variant="outline"onClick={() => setMoveMode(!moveMode)}>{moveMode ? "Modo Edición" : "Modo movimiento"}</Button>
      </div>

<DragDropContext onDragEnd={handleDragEnd}>
  <div className="space-y-4">
    {groups.map((group, groupIndex) => (
      <Droppable droppableId={group.id} key={group.id}>
        {(provided) => (
          <Card
            ref={provided.innerRef}
            {...provided.droppableProps}
            className="p-4 border rounded-lg"
          >
            {/* Header del grupo */}
            <div className="flex justify-between items-center mb-2">
              <input
                type="text"
                value={group.name}
                onChange={(e) => updateGroupName(groupIndex, e.target.value)}
                className="font-semibold border-b border-gray-300 focus:outline-none flex-1 mr-2"
              />
              <div className="flex items-center gap-1">
                <Button
                  variant="ghost"
                  size="icon"
                  className="hover:bg-blue-100 text-blue-600 rounded-full"
                  onClick={() => moveGroup(groupIndex, "up")}
                  disabled={groupIndex === 0}
                >
                  <ArrowUp className="w-5 h-5" />
                </Button>
                <Button
                  variant="ghost"
                  size="icon"
                  className="hover:bg-blue-100 text-blue-600 rounded-full"
                  onClick={() => moveGroup(groupIndex, "down")}
                  disabled={groupIndex === groups.length - 1}
                >
                  <ArrowDown className="w-5 h-5" />
                </Button>
                <Button
                  variant="ghost"
                  size="icon"
                  className="hover:bg-red-100 text-red-600"
                  onClick={() => removeGroup(groupIndex)}
                >
                  <Trash2 size={18} />
                </Button>
              </div>
            </div>

            {/* 🔹 Solo un bloque controlado por moveMode */}
            {moveMode ? (
              group.fields.map((field, fieldIndex) => (
                <Draggable key={field.id} draggableId={field.id} index={fieldIndex}>
                  {(provided, snapshot) => (
                    <div
                      ref={provided.innerRef}
                      {...provided.draggableProps}
                      {...provided.dragHandleProps}
                      className={`p-2 mb-2 border rounded bg-white cursor-move ${
                        snapshot.isDragging ? "bg-blue-100" : "bg-gray-50"
                      }`}
                    >
                      {field.label}
                    </div>
                  )}
                </Draggable>
              ))
            ) : (
              <AddFieldSelector
                groupIndex={groupIndex}
                groupFields={group.fields}
                addField={addField}
                updateField={updateField}
                removeField={removeField}
              />
            )}

            {provided.placeholder}
          </Card>
        )}
      </Droppable>
    ))}
  </div>
</DragDropContext>





      {/* Vista previa del script */}
      <div className="mt-6">
        <h2 className="text-lg font-semibold mb-2">Vista previa del script</h2>
        <pre className="bg-gray-100 p-3 rounded-md text-sm overflow-x-auto">
          {JSON.stringify(groups, null, 2)}
        </pre>
      </div>
    </div>
  );
}